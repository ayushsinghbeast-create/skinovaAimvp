// --- Express.js Backend for Vercel Serverless Function ---

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3001; // Only for local development

// --- Mock Database (Google Sheets Data Structure) ---
// In a production environment, you would use the 'googleapis' library here
// and replace these in-memory arrays with Sheets API calls (get, append, update).

let mockUsers = [
    { id: 'user-123', name: 'Alex Johnson', email: 'test@skinova.ai', password: '123456', subscription: 'Premium', referralCode: 'ALEX123', referralPoints: 120 },
    { id: 'user-456', name: 'Jane Doe', email: 'jane@example.com', password: 'password', subscription: 'Pro', referralCode: 'JANE456', referralPoints: 50 },
];

let mockAnalysisHistory = [
    { userId: 'user-123', id: 'a-001', date: '2023-09-15', skinType: 'Oily', acneLevel: 3, wrinkleLevel: 2, score: 78, recommendations: [{ product: 'Salicylic Cleanser', purpose: 'Acne control' }, { product: 'Oil-Free Moisturizer', purpose: 'Hydration' }] },
    { userId: 'user-123', id: 'a-002', date: '2023-10-01', skinType: 'Normal', acneLevel: 2, wrinkleLevel: 2, score: 85, recommendations: [{ product: 'Gentle Cleanser', purpose: 'Daily wash' }, { product: 'Hydrating Serum', purpose: 'Barrier repair' }] },
];

let mockAcademyLessons = [
    { id: 'l1', category: 'Cleansing', type: 'Video', title: 'The Double Cleanse Method', duration: '5:30', content: 'https://www.youtube.com/embed/n4K2-10k_gI', completed: true, quiz: true },
    { id: 'l2', category: 'Anti-aging', type: 'Article', title: 'Understanding Retinol: Your Ultimate Guide', duration: '10 min read', content: 'Retinol is a derivative of Vitamin A and one of the most powerful anti-aging ingredients available. It works by encouraging cell turnover and stimulating collagen production. Start slowly, 1-2 times a week, to allow your skin to adjust and prevent irritation. Always use sunscreen the next morning.', completed: false, quiz: true },
    { id: 'l3', category: 'Acne-care', type: 'Video', title: 'Spot Treatment vs. Whole Face', duration: '7:00', content: 'https://www.youtube.com/embed/3L8Zf3w-i0o', completed: false, quiz: false },
    { id: 'l4', category: 'Diet', type: 'Article', title: 'Foods for Glowing Skin', duration: '5 min read', content: 'Foods rich in Omega-3 fatty acids, like salmon and walnuts, can help reduce inflammation, which is key for clear skin. Antioxidants found in berries and green tea also fight free radical damage. Stay hydrated and avoid excessive sugar intake.', completed: false, quiz: false },
    { id: 'l5', category: 'Mental Health', type: 'Video', title: '5-Minute Skin Relaxation Exercise', duration: '5:00', content: 'https://www.youtube.com/embed/inpL2JdKj8o', completed: false, quiz: false },
];

let mockForumPosts = [
    { id: 'p1', author: 'Jane Doe', userId: 'user-456', date: '2023-10-02', title: 'Best sunscreen for oily skin?', category: 'Products', content: 'I live in a very humid climate and my current sunscreen makes my face look shiny by midday. Any recommendations for a matte, oil-free SPF?', upvotes: 15, replies: [{ id: 'r1-1', author: 'Alex Johnson', content: 'Try the La Roche-Posay Anthelios.', upvotes: 5, date: '2023-10-02' }, { id: 'r1-2', author: 'DermExpert', content: 'Look for mineral sunscreens with zinc oxide.', upvotes: 10, date: '2023-10-02' }] },
    { id: 'p2', author: 'Mark Smith', userId: 'user-789', date: '2023-09-28', title: 'Does sugar really cause acne?', category: 'Diet', content: 'I\'ve heard conflicting reports about diet and skin. Is there any solid science that links sugar intake to inflammatory acne?', upvotes: 30, replies: [{ id: 'r2-1', author: 'SkinGuru', content: 'Yes, high glycemic index foods can spike insulin and cause inflammation.', upvotes: 2, date: '2023-09-29' }] },
    { id: 'p3', author: 'Alex Johnson', userId: 'user-123', date: '2023-10-05', title: 'My new routine is causing purging, help!', category: 'Routine', content: 'I just started using a high-strength AHA and I am breaking out more. Is this normal "purging" or is my skin reacting badly? I am confused.', upvotes: 5, replies: [] },
];

let mockConsultBookings = [
    { id: 'b1', userId: 'user-123', date: '2023-10-10', time: '14:00', type: 'Video Call', notes: 'Discuss post-analysis product routine.', status: 'Confirmed' }
];

let mockDiscountCodes = [
    { code: 'SKIN20', discount: 20, active: true },
    { code: 'WELCOMENEW', discount: 10, active: true },
    { code: 'EXPIRED', discount: 50, active: false },
];

let mockReferralRewards = [
    { id: 'rwd1', name: 'Pro Plan (1 Month)', points: 500, icon: 'ðŸŒŸ', description: 'One month of Pro features, free.' },
    { id: 'rwd2', name: '$10 Discount Coupon', points: 150, icon: 'ðŸ’¸', description: 'A $10 discount code for any plan upgrade.' },
];

// --- Middleware Setup ---

app.use(cors({
    origin: '*', // Allow all origins for Vercel deployment simplicity
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
}));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// --- Mock Authentication Middleware ---
const mockAuth = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        // Allow public endpoints to pass through without token
        if (req.path === '/api/login' || req.path === '/api/signup') {
            return next();
        }
        return res.status(401).json({ message: 'Authentication required. No token provided.' });
    }

    const token = authHeader.split(' ')[1];
    // In a real app, verify JWT (e.g., jwt.verify(token, SECRET_KEY))
    // Here, we'll just check if a token exists and mock the user ID
    if (token) {
        // Mock token -> user ID mapping (simplistic JWT simulation)
        const userId = token.split('.')[1]; // Mock ID is stored in the token payload part

        // Find the user object
        const user = mockUsers.find(u => u.id === userId);
        if (user) {
            req.user = user;
            return next();
        }
    }

    return res.status(401).json({ message: 'Invalid or expired token.' });
};

app.use('/api', mockAuth);

// --- Helper Functions ---
const generateMockToken = (userId) => {
    // Mock JWT format: HEADER.PAYLOAD(userId).SIGNATURE
    const mockHeader = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9';
    // Base64-encoded userId as payload
    const mockPayload = userId;
    const mockSignature = 'S1GNA7UR3';
    return `${mockHeader}.${mockPayload}.${mockSignature}`;
};

const getUserId = (req) => req.user.id;

// --- API Endpoints ---

// 1. Auth Endpoints
app.post('/api/signup', (req, res) => {
    const { name, email, password } = req.body;
    if (!name || !email || !password) {
        return res.status(400).json({ message: 'All fields are required.' });
    }
    if (mockUsers.some(u => u.email === email)) {
        return res.status(409).json({ message: 'User already exists.' });
    }

    const newUserId = `user-${Date.now()}`;
    const newUser = {
        id: newUserId,
        name,
        email,
        password, // In real app: hash and salt password!
        subscription: 'Free',
        referralCode: name.substring(0, 3).toUpperCase() + Math.floor(Math.random() * 900) + 100,
        referralPoints: 0,
    };
    mockUsers.push(newUser);

    // Mock referral code check (simulating sheet lookup)
    const referrerId = req.query.ref;
    if (referrerId) {
        const referrer = mockUsers.find(u => u.id === referrerId);
        if (referrer) {
            referrer.referralPoints += 50; // Reward referrer
            console.log(`User ${newUserId} signed up via referral. Referrer ${referrerId} earned 50 points.`);
        }
    }

    res.status(201).json({ message: 'User created successfully. Please login.' });
});

app.post('/api/login', (req, res) => {
    const { email, password } = req.body;
    const user = mockUsers.find(u => u.email === email && u.password === password); // In real app: use bcrypt.compare()

    if (!user) {
        return res.status(401).json({ message: 'Invalid credentials.' });
    }

    const token = generateMockToken(user.id);
    const { password: _, ...userInfo } = user; // Exclude password from response

    res.json({ token, user: userInfo });
});

// 2. Dashboard Endpoint
app.get('/api/dashboard', (req, res) => {
    const userId = getUserId(req);
    const userAnalysis = mockAnalysisHistory.filter(a => a.userId === userId);

    const latestAnalysis = userAnalysis.length > 0 ? userAnalysis[userAnalysis.length - 1].date : 'N/A';
    const academyProgress = Math.min(100, Math.floor((mockAcademyLessons.filter(l => l.completed).length / mockAcademyLessons.length) * 100));
    const upcomingConsult = mockConsultBookings.find(b => b.userId === userId && new Date(b.date) > new Date())?.date || 'None';
    const trendingPosts = mockForumPosts.sort((a, b) => (b.upvotes + b.replies.length) - (a.upvotes + a.replies.length)).slice(0, 3);

    res.json({
        lastAnalysis: latestAnalysis,
        academyProgress,
        upcomingConsult,
        trendingPosts: trendingPosts.map(p => ({ title: p.title, replies: p.replies.length, upvotes: p.upvotes })),
    });
});

// 3. Skin Analysis Endpoints
app.get('/api/analysis', (req, res) => {
    const userId = getUserId(req);
    const history = mockAnalysisHistory.filter(a => a.userId === userId).map(a => {
        const { recommendations, ...rest } = a; // Exclude full recommendations list from history view
        return rest;
    });
    res.json({ history });
});

app.post('/api/analysis', (req, res) => {
    const userId = getUserId(req);
    const newAnalysis = {
        id: `a-${Date.now()}`,
        userId,
        ...req.body,
        date: new Date().toLocaleDateString(),
    };
    mockAnalysisHistory.push(newAnalysis);
    res.status(201).json({ message: 'Analysis saved successfully.', newAnalysis });
});

// 4. Academy Endpoints
app.get('/api/academy', (req, res) => {
    // In a real app, filter 'completed' status based on user progress sheet
    res.json({ lessons: mockAcademyLessons });
});

app.post('/api/academy/quiz', (req, res) => {
    const userId = getUserId(req);
    const { lessonId, score } = req.body;

    // Mock saving quiz score
    const lesson = mockAcademyLessons.find(l => l.id === lessonId);
    if (lesson) {
        lesson.completed = true; // Mark as completed
        // Logic to save userId, lessonId, score to a QuizScores sheet
        res.json({ message: 'Quiz score saved and lesson marked as complete.' });
    } else {
        res.status(404).json({ message: 'Lesson not found.' });
    }
});

// 5. Forum Endpoints
app.get('/api/forum', (req, res) => {
    // Return posts without full reply details for the main list view
    const postsList = mockForumPosts.map(p => ({
        id: p.id,
        author: p.author,
        date: p.date,
        title: p.title,
        category: p.category,
        content: p.content,
        upvotes: p.upvotes,
        replies: p.replies.length,
    })).sort((a, b) => new Date(b.date) - new Date(a.date));

    res.json({ posts: postsList });
});

app.get('/api/forum/post/:id', (req, res) => {
    const postId = req.params.id;
    const post = mockForumPosts.find(p => p.id === postId);
    if (!post) {
        return res.status(404).json({ message: 'Post not found.' });
    }
    res.json({ post });
});

app.post('/api/forum', (req, res) => {
    const userId = getUserId(req);
    const user = req.user;
    if (user.subscription === 'Free') {
        return res.status(403).json({ message: 'Upgrade to Pro or Premium to post questions.' });
    }
    const { title, content, category } = req.body;
    const newPost = {
        id: `p${Date.now()}`,
        author: user.name,
        userId: userId,
        date: new Date().toLocaleDateString(),
        title,
        category,
        content,
        upvotes: 0,
        replies: [],
    };
    mockForumPosts.push(newPost);
    res.status(201).json({ message: 'Post created successfully.', post: newPost });
});

app.post('/api/forum/reply/:postId', (req, res) => {
    const userId = getUserId(req);
    const user = req.user;
    const postId = req.params.postId;
    const { content } = req.body;

    const post = mockForumPosts.find(p => p.id === postId);
    if (!post) {
        return res.status(404).json({ message: 'Post not found.' });
    }

    const newReply = {
        id: `r${Date.now()}`,
        author: user.name,
        content,
        upvotes: 0,
        date: new Date().toLocaleDateString(),
    };
    post.replies.push(newReply);
    res.status(201).json({ message: 'Reply posted successfully.' });
});

app.post('/api/forum/upvote/:replyId', (req, res) => {
    const replyId = req.params.replyId;
    let found = false;
    for (const post of mockForumPosts) {
        const reply = post.replies.find(r => r.id === replyId);
        if (reply) {
            reply.upvotes += 1; // Mock increment
            found = true;
            break;
        }
    }
    if (!found) {
        return res.status(404).json({ message: 'Reply not found.' });
    }
    res.json({ message: 'Upvoted successfully.' });
});


// 6. Consult Endpoints
app.get('/api/consult', (req, res) => {
    const userId = getUserId(req);
    const bookings = mockConsultBookings.filter(b => b.userId === userId);
    res.json({ bookings });
});

app.post('/api/consult', (req, res) => {
    const userId = getUserId(req);
    const user = req.user;
    if (user.subscription !== 'Premium') {
        return res.status(403).json({ message: 'Consultation booking is only available for Premium users.' });
    }
    const { date, time, type, notes } = req.body;
    const newBooking = {
        id: `b${Date.now()}`,
        userId,
        date,
        time,
        type,
        notes,
        status: 'Confirmed',
    };
    mockConsultBookings.push(newBooking);
    res.status(201).json({ message: 'Booking confirmed.', booking: newBooking });
});

// 7. Payments Endpoints
app.post('/api/payments/coupon', (req, res) => {
    const { code } = req.body;
    const coupon = mockDiscountCodes.find(c => c.code === code.toUpperCase());

    if (!coupon || !coupon.active) {
        return res.status(404).json({ message: 'Invalid or expired coupon code.' });
    }
    res.json({ message: 'Coupon applied.', discount: coupon.discount });
});

app.post('/api/payments/checkout', (req, res) => {
    const userId = getUserId(req);
    const { plan, price, coupon } = req.body;
    const user = mockUsers.find(u => u.id === userId);

    // Mock payment processing (simulating Stripe Sandbox success)
    if (price > 0 && plan !== 'Free') {
        console.log(`Mock Payment: User ${userId} paid $${price} for ${plan} (Coupon: ${coupon})`);
        // In a real app, call Stripe API here.
    }

    // Update user subscription in mock DB
    if (user) {
        user.subscription = plan;
        // In a real app, save payment details to a Sheet
        res.json({ message: 'Payment successful and subscription updated.' });
    } else {
        res.status(404).json({ message: 'User not found.' });
    }
});

// 8. Referral Endpoints
app.get('/api/referrals', (req, res) => {
    // Mock referral data - in a real app, this would be user-specific stats
    res.json({ rewards: mockReferralRewards });
});

app.post('/api/referrals/redeem', (req, res) => {
    const userId = getUserId(req);
    const user = mockUsers.find(u => u.id === userId);
    const { rewardId } = req.body;
    const reward = mockReferralRewards.find(r => r.id === rewardId);

    if (!user || !reward) {
        return res.status(404).json({ message: 'User or reward not found.' });
    }
    if (user.referralPoints < reward.points) {
        return res.status(400).json({ message: 'Insufficient referral points.' });
    }

    user.referralPoints -= reward.points;
    // Apply reward logic (e.g., set subscription to Pro for 1 month)
    console.log(`User ${userId} redeemed ${reward.name}. Points remaining: ${user.referralPoints}`);
    res.json({ message: 'Reward redeemed successfully.' });
});

// 9. Diet Endpoints
app.get('/api/diet', (req, res) => {
    const mockDietPlan = {
        summary: 'Your current skin goal is Anti-inflammatory. Focus on foods rich in Omega-3, probiotics, and antioxidants to calm skin redness and combat cellular stress.',
        focusAreas: [
            { title: 'Omega-3 Rich', foods: 'Salmon, Mackerel, Flaxseeds, Walnuts' },
            { title: 'Probiotics', foods: 'Yogurt, Sauerkraut, Kimchi, Kombucha' },
            { title: 'Antioxidants', foods: 'Blueberries, Green Tea, Spinach, Dark Chocolate' },
        ]
    };
    res.json({ plan: mockDietPlan });
});

// 10. Default Endpoint for Vercel
app.get('/api', (req, res) => {
    res.json({ message: 'SkinovaAi API is running.' });
});

// Export the Express app for Vercel Serverless Function deployment
module.exports = app;

// Optionally run the server locally for testing:
/*
if (process.env.NODE_ENV !== 'production') {
    app.listen(PORT, () => {
        console.log(`Backend running locally on http://localhost:${PORT}`);
    });
}
*/
